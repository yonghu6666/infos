Question
1 CSS中的用到的单位 1
	px, em，rem
P180_20210627_0
P178_20210613_0|P170_20210612_0|P168_20210611_0|P163_20210610_2|P158_20210608_1|P156_20210607_1
P153_20210605_0|P149_20210604_1|P147_20210602_1|P138_20210601_1
P132_20210529_1|P125_20210528_0|P121_20210526_1|P110_20210525_2|P107_20210524_1
P103_20210523_0|P095_20210520_1|P088_20210517_0
P083_20210515_0|P080_20210514_2|P073_20210513_2|P061_20210512_1|P052_20210511_0|P040_20210510_0
P025_20210507_0
P015_20210501_2

8 基本视觉格式化
	8.1 基本框
		CSS假定每个元素都会生成一个或多个矩形框，这称为元素框。各元素框中心有一个内容区（content area）。这个内容区周围有可选的内边距、边框、外边距。
		内容的背景（例如某种颜色或平铺图像）也会应用到内边距。外边距通常是透明的，从中可以看到父元素的背景。内边距不能是负值，但是外边距可以。
		边框使用已定义样式生成，如solid或inset，边框的颜色使用border-color属性设置。如果没有设置颜色，那么边框将取元素内容的前景色。边框与内容和内边距有相同的背景。边框的宽度不能为负值。
		8.1.1 包含块
			每个元素都相对于其包含块摆放；可以这么说，包含块就是一个元素的“布局上下文”。
			对于正常的西方语言文本流的一个元素，包含块由最近的块级祖先框、表单元格或行内块祖先框的内容边界（content edge）构成。
		8.1.2 元素分类
			正常流：这是指西方语言文本从左向右、从上向下显示，这也是我们熟悉的传统HTML文档的文本布局。注意，在非西方语言中，流方向可能不同。大多数元素都在正常流中，要让一个元素不在正常流中，唯一的办法就是使之成为浮动或定位元素。
			非替换元素：如果一个元素的内容包含在文档中，则称之为非替换元素。例如，如果一个段落的文本内容都放在该元素本身之内，这个段落就是一个非替换元素。
			替换元素：这是指作为其他内容占位符的一个元素。替换元素的一个经典例子就是img元素，它只是指向一个图像文件，这个文件将插入到文档流中该img元素本身所在位置。大多数表单元素也可以替换（例如，<input type='radio'>）。
			块级元素：这是指段落、标题或div之类的元素。这些元素在正常流中时，会在其框之前和之后生成“换行”，所以处于正常流中的块级元素会垂直摆放。通过声明display: block，可以让元素生成块级框。
			行内元素：这是指strong或span之类的元素。这些元素不会在之前或之后生成“行分隔符”，它们是块级元素的后代。通过声明display: inline，可以让元素生成一个行内框。
			根元素：位于文档树顶端的元素。在HTML文档中，这就是元素html。在XML文档中，则可以是该语言允许的任何元素。
	8.2 块级元素
		外边界、外边距、边框、内边距、内边界。
		一般地，一个元素的width被定义为从左内边界到右内边界的距离，height则是从上内边界到下内边界的距离。


7 文本属性
	7.1 缩进和水平对齐
		7.1.1 缩进文本
			使段落的第一行缩进。
			text-indent: <length> | <percentage> | inherit
			初始值： 0
			应用于：块级元素
			百分比：相对于包含块的宽度
			计算值：对于百分数值，要根据指定确定；对于长度值，则为绝对长度。
			一般地，可以为所有的块级元素应用text-indent，但无法将这个属性应用到行内元素，图像之类的替换元素上也无法应用text-indent属性。
		7.1.2 水平对齐
			text-align: 
				CSS2.1 值： left | center | right | justify | inherit
				CSS2值: 			left | center | right | justify | <string> | inherit
			初始值： 	用户代理特定的值；还可能取决于书写方向
			应用于： 	块级元素
			继承性： 	有
			计算值： 	根据指定确定
			说明： 		CSS2包含一个<string>值，因为没有相应实现，所以在CSS2.1中已经去除
			只应用于块级元素，所以无法将行内的一个锚居中而不影响行中的其余部分。
			justify，在两端对齐文本中，文本行的左右两端都放在父元素的边界上。然后调整单词和字母间的间隔，使各行的长度恰好相等。用户代理会确定两端对齐文本如何拉伸，以填满父元素左右边界之间的空间。
	7.2 垂直对齐
		7.2.1 行高
			line-height: <length> | <percentage> | <number> | normal | inherit
			初始值： normal
			应用于： 所有元素
			百分数： 相对于元素的字体大小
			计算值： 对于长度和百分数值是绝对数值；否则，根据指定确定。
			它是指文本行基线之间的距离，而不是字体的大小，他确定了将各个元素框的高度增加或减少多少。
		7.2.2 构造文本行
			文本行中的每个元素都会生成一个内容区，这由字体的大小确定。这个内容区则会生成一个行内框（inline box），如果不存在其他因素，这个行内框就完全等于该元素的内容区。
		7.2.3 指定line-height值
			如果使用了默认值noraml，用户代理必须计算行间的垂直空间，通常是字体大小的1.2倍。
		7.2.4 行高和继承
			当一个块级元素从另一个元素继承line-height时，问题变得更为复杂。line-height值从父元素集成时，要从父元素计算，而不是在子元素上计算。
			指定一个数时，缩放因子将是继承值而不是计算值。这个数会应用到该元素及其所有子元素，所以各元素都根据其自己的font-size计算line-height。
	7.3 垂直对齐文本
		vertical-align属性只应用于行内元素和替换元素。
		vertical-align: baseline | sub | super | top | text-top | middle | bottom | text-bottom | <percentage> | <length> | inherit
		初始值： baseline
		应用于：行内元素和表单元格
		继承性： 无
		百分数：相对于元素的line-height值
		计算值：对于百分数和长度值，为绝对长度；否则根据指定确定
		说明：应用到表单元格时，只能识别baseline、top、middle和bottom等值
		7.3.1 基线对齐
			vertical-align: baseline要求一个元素的基线与其父元素的基线对其。如果一个垂直对齐元素没有基线--也就是说，如果这是一个图像或表单输入元素，或者是其他替换元素--那么该元素的底端与其父元素的基线对齐。
		7.3.2 上标和下标
			vertical-align: sub声明会使一个元素变成下标，这意味着其基线（或者如果这是一个替换元素，则是其底端）相对于其父元素的基线降低。
			super刚好与sub相反。它将元素的基线（或替换元素的底端）相对于父元素的基线升高。
		7.3.3 底端对齐
			vertical-align: bottom将元素行内框的底端与行框的底端对齐。
			vertical-align: text-bottom是指行内文本的底端。替换元素或任何其它类型的非文本元素会忽略这个值。对于这些元素，将考虑一个“默认”的文本框。这个默认框由父元素的font-size得到。要对齐的元素的行内框底端在于这个默认文本框的底端对齐。
		7.3.4 顶端对齐
			vertical-align: top的效果与bottom刚好相反。类似地，vertical-align: text-top与text-bottom的作用相反。
		7.3.5 居中对齐
			middle会把行内元素框的中点与父元素基线上方0.5ex处的一个点对其，这里的1ex相对于父元素的font-size定义。
		7.3.6 百分数
			如果vertical-align设置为一个百分数，会把元素的基线（或替换元素的底边）相对于父元素的基线升高或降低指定的量（指定的百分数要计算为该元素line-height的百分数，而不是相对于其父元素的line-height）。
		7.3.7 长度对齐
			它把一个元素升高或降低指定的距离。因此，vertical-align: 5px;会把一个元素与对其前相比上升5像素。

		所有垂直对齐的元素都会影响行高。应该记得行框的描述，其高度要足以包含最高行内框的顶端和最低行内框的底端。这包括因垂直对齐上升或下降的行内框。
	7.4 字间隔和字母间隔
		7.4.1 字间隔
			word-spacing会修改字之间的标准间隔。
			word-spacing: <length> | normal | inherit 
			初始值：normal
			应用于：所有元素
			继承性：有
			计算值：对于normal，为绝对长度0；否则，是绝对长度
			用最简单的CSS术语来讲，“字”可以是任何非空白字符组成的串，并由某种空白符包围的字。支持CSS的用户代理不一定能确定一个给定语言中哪些是合法的字，而哪些不是。
		 7.4.2 字母间隔
		 	letter-spacing: <length> | normal | inherit
		 	初始值：normal
		 	应用于：所有元素
		 	继承性：有
		 	计算值：对于长度值，为绝对长度；否则，为noraml
		7.4.3 间隔和对齐
			word-spacing的值可能受text-align属性值的影响。如果一个元素是两端对齐的，字母和字之间的空间可能会调整，以便文本在整行中刚好放下。这可能又会改变创作人员用word-spacing声明的字间隔。如果为letter-spacing指定一个长度值，字符间隔则不会受text-align影响，但是如果letter-spacing的值是normal，字符间的间隔可能改变，以便将文本两端对齐。CSS没有指定应当如何计算间隔，所以用户代理只是将其填满。
			一般地，一个元素的子元素会继承该元素的计算值。无法为word-spacing或letter-spacing定义一个可继承的缩放因子来取代计算值。这与line-height不同。
	7.5 文本转换
		text-transform: uppercase | lowercase | capitalize | none | inherit
		初始值：none
		应用于：所有元素
		继承性：有
		计算值：根据指定确定
		默认值none对文本不做任何改动，将使用源文档中原有的大小写。uppercase和lowercase将文本转换为全大写或全小写字符。capitalize只对每个单词的首字母大写。
		不同用户代理可能会用不同的方法来确定单词是从哪里开始。相应地确定哪些字母要大些。
	7.6 文本装饰
		text-decoration: none | [underline || overline || line-through || blink] | inherit
		初始值：none
		应用于：所有元素
		继承性：无
		计算值：根据指定确定
		7.6.1 怪异的装饰
			没有继承性意味着文本上画的任何装饰线（上划线或贯穿线）与父元素的颜色相同。即使后代元素本身有其他颜色也是如此。
	7.7 文本阴影
		CSS2包含，CSS2.1去掉了。目前chrome支持该属性。
		text-shadow: none | [<color> || <length><length><length>?,]* [<color> || <length><length><length>?] | inherit
		初始值：none
		应用于：所有元素
		继承性：无
		每个阴影都由一个颜色和3个长度值来定义。这个颜色可以定义阴影的颜色。前两个长度值确定了阴影与文本的偏移距离，第三个长度值可选，定义了阴影的“模糊半径”。
		模糊半径定义为从阴影轮廓到模糊效果边界的距离。具体的模糊方法并未定义，所以不同的用户代理可能会有不同的效果。
	7.8 处理空白符
		white-space: normal | nowrap | pre | pre-wrap | pre-line | inherit
		初始值：normal
		应用于：所有元素（CSS2.2)；块级元素（CSS1和CSS2）
		继承性：无
		计算值：根据指定确定
		它用于影响浏览器处理字之间和文本行之间的空白符的方式。从某种程度上讲，默认的XHTML处理已经完成了空白处理符：它会把所有空白符合并为一个空格。
		white-space: normal，告诉浏览器按平常的做法去做：丢掉多余的空白符，换行字符（回车）会转换为空格，一行中多个空格的序列也会转换为一个空格。
		white-space: pre，相当于一个pre元素，即浏览器会保留额外的空格及回车。
		white-space: nowrap，会防止元素中的文本换行，除非使用了一个br元素。在CSS中使用nowrap非常类似于HTML4中用<td nowrap>将一个表单元格设置为不能换行，不过white-space值可以应用到任何元素。
		white-space: pre-wrap，被设置元素中的文本会保留空白序列，但是文本会正常地换行。如果设置为这个值，源文本中的行分隔符以及生成的行分隔符也会保留。
		white-space: pre-line，会像正常文本中一样合并空白符序列，但保留换行符。
		white-space属性的行为：
		值 					空白符 				换行符 				 自动换行 				
		pre-line 		合并 					保留 						允许
		normal 			合并 					忽略 						允许
		nowrap 			合并 					忽略 						不允许
		pre 				保留 					保留 						不允许
		pre-wrap 		保留 					保留 						允许
	7.9 文本方向
		direction: ltr | rtl | inherit
		初始值： ltr
		应用于： 所有元素
		继承性： 有
		计算值： 根据指定确定
		direction属性影响块级元素中文本的书写方向、表中列布局的方向、内容水平填充其元素框的方向，以及两端的对齐元素中最后一行的位置。对于行内元素，只有当unicode-bidi属性设置为embed或bidi-override时才会应用direction属性。
		unicode-bidi: normal | embed | bidi-override | inherit
		初始值：normal
		应用于：所有元素
		继承性：无
		计算值：根据指定确定
		unicode-bidi: normal，元素不会对双向算法打开附加的一层嵌套。对于行内元素，顺序的隐式重排会跨元素边界进行。
		unicode-bidi: embed，如果是一个行内元素，这个值对于双向算法会打开附加的一层嵌套。这个嵌套层的方向是由direction属性指定。会在元素内部隐式地完成顺序重排。这对应于在元素开始处增加一个LRE（对于direction: lrt: U+202A）或RLE（对于direction: rtl: U+200B），并在元素的最后增加一个PDF（U+202C）。
		unicode-bidi: bidi-override，这会为行内元素创建一个覆盖。对于块级元素，将为不在另一块中的行内后代创建一个覆盖。这说明，顺序重排在元素内部严格按direction属性进行：忽略了双向算法的隐式部分。这对应于在元素开始处增加一个LRO（对于direction: lrt: U+202D）或RLO（对于direction: rtl: U+202E），并在元素之后增加一个PDF（U+202C）。

6 字体
	6.1 字体系列
		font-family
		CSS定义了5种通用字体系列：Serif字体、Sans-serif字体、Monospace字体、Cursive字体、Fantasy字体。
		6.1.1 使用通用字体系列
			可以使用属性font-family在文档中采用任何字体系列。
		6.1.2 指定字体系列
			可以在font-family里指定多个字体，各个字体之间使用逗号隔开，那么用户代理会根据所列值的先后顺序，查找相匹配的字体。
		6.1.3 使用引号
			只有当一个字体名中有一个或多个空格，或者如果字体名包括#或$之类的符号，才需要在font-family声明中加入引号。这不是必须的，但如果不加引号，可能会导致用户代理忽略这个特定的字体名。
			唯一必须加引号的是与所接受关键字匹配的字体名。
			通用字体系列名在指示具体的通用系列时，就不能加引号。
	6.2 字体加粗
		font-weight: normal | bold | bolder | lighter | 100 | 200 | 300 | 400 | 500 | 600 | 700 | 800 | 900 | inherit
		初始值： normal
		6.2.1 加粗如何起作用
		6.2.2 让字体更粗
			border
		6.2.3 让字体更细
			lighter
	6.3 字体大小
		font-size： xx-small | x-small | small | medium | large | x-large | xx-large | smaller | larger | <length> | <percentager> | inherit
		初始值：medium
		百分比：根据父元素的字体大小来计算
		计算值：绝对长度
		6.3.1 绝对大小
			xx-small | x-small | small | medium | large | x-large | xx-large | smaller | larger
		6.3.2 相对大小
			larger | smaller
			相对大小不必限制在绝对大小范围内。
		6.3.3 百分数和大小
			百分数值总是根据从父元素继承的大小来计算。
		6.3.4 字体大小和继承
			继承的是计算值而不是百分数。
			使用百分比时，由于每一次继承，用户代理可能都取了整数，所以可能会存在误差积累。
		6.3.5 使用长度单位
			值和单位一章中，任何单位都可以作为font-size的值。
	6.4 风格和变形
		font-style，font-variant
		6.4.1 有风格的字体
			font-style：italic | oblique | normal | inherit
			初始值：normal
			font-variant：small-caps | normal | inherit
			初始值：normal
	6.5 拉伸和调整字体

	6.6 font属性
		font: [[<font-style> || <font-variant> || <font-weight>]?<font-size>[/<line-height>]?<font-family>] | caption | icon | menu | message-box | small-caption | status-bar | inherit
		初始值：根据单个属性
		百分比：对于<font-size>要相对于父元素来计算，对于<line-height>则相对于元素的<font-size>来计算
		（font-size和font-family值是必要的，而且顺序不能变）
		6.6.1 增加行高
			line-height是一个文本属性，而不是字体属性。
		6.6.2 适当地使用简写

		6.6.3 使用系统字体
			caption：用于有标题的控件，如按钮。
			icon：用于对图标加标签。
			menu：用于菜单，即下拉菜单和菜单列表。
			message-box：用于对话框。
			small-caption：用于对小控件加标签。
			status-bar：用于窗口状态条。
	6.7 字体匹配
		6.7.1 font-face规则
			CSS2.1已删除该规则
			字体名匹配
			智能字体匹配
			字体合成
			字体下载



5 值和单位
	5.1 数字
		CSS中有两类数字：整数和实数（小数）。
	5.2 百分比
		数字后面跟一个百分号（%）
	5.3 颜色
		如颜色名、十六进制代码等
		5.3.1 命名颜色
			aqua、fuchsia、lime、olive、red、white、black、gray、maroon、orange、silver、yellow、blue、green、navy、purple、teal。
		5.3.2 用RGB指定颜色
			5.3.2.1 函数式RGB颜色
				语法一般是rgb(colorValue1, colorValue2, colorValue3)，其中colorValue*用一个百分数或整数三元组表示。百分数值再0%~100%范围内，整数范围为0~255。
			5.3.2.2 十六进制RGB颜色
				语法是#RRGGBB。
				如果组成十六进制数的3组数各自都是成对的，CSS还允许采用一种简写记法：#RGB。
			5.3.2.3 颜色汇总

			5.3.2.4 Web颜色安全
				Web安全颜色是指，在256色计算机系统上总能避免抖动的颜色。Web安全颜色可以表示为RGB值20%和51（相应的十六进制值为33）的倍数。另外，0%或0也是一个安全值。
	5.4 长度单位
		MDN中指出绝对长度单位有7个：
			单位 		名称	 					等价换算
			cm 			厘米 					1cm=96px/2.54
			mm 			毫米 					1mm=1/10th of 1cm
			Q 			四分之一毫米		1Q=1/40th of 1cm
			in 			英寸 					1in=2.54cm=96px
			pc 			十二点活字 		1pc=1/16th of 1in
			pt 			点 						1pt=1/72th of 1in
			px 			像素 					1px=1/96th of 1in
		MDN中指出相对长度单位有9个：
			单位 	相对于
			em 		在font-size中使用是相对于父元素的字体大小，	在其他属性中使用是相对于自身的字体大小，如width
			ex 		字符“x”的高度
			ch 		数字“0”的宽度
			rem 	根元素的字体大小
			lh 		元素的line-height
			vw 		视窗宽度的1%
			vh 		视窗高度的1%
			vmin 	视窗较小尺寸的1%
			vmax 	视窗大尺寸的1%

		5.4.1 绝对长度单位
			共有5种：
				英寸（in）：。
				厘米（cm）：1英寸是2.54厘米，1厘米等于0.394英寸。
				毫米（mm）：。
				点（pt）：印刷术语。1英寸是72点。
				派卡（pc）：印刷术语。1派卡相当于12点。
			5.4.1.1 处理绝对长度
				ppi，每英寸的实际像素数。
				绝对单位在定义打印文档的样式表时更为有用，在此通常会以英寸、点和派卡来度量长度。
		5.4.2 相对长度单位
			em、ex和px。
			5.4.2.1 em和ex单位
				1个“em”定义为一种给定字体的font-size值。如果一个元素的font-size为14像素，那么对于该元素，1em就等于14像素。
				另一方面，在设置字体的大小时，em的值会相对于父元素的字体大小改变。
				ex是指所用字体中小写x的高度。
			5.4.2.2 em和ex的实际问题
				ex的值不方便计算，所以有些用户代理会取em的值，然后再取其一半作为ex值。
			5.4.2.3 像素长度
				px，像素。显示器被划分为一个由小框组成的网格。每个框就是一个像素。如果将一个元素的高和宽顶定义为某个像素数，那么这个元素的高和宽就会由相应多个显示器元素组成。
			5.4.2.4 像素理论
				在讨论像素时，CSS规范建议，如果一个显示类型的设置与96ppi截然不同，用户代理应当把像素度量缩放为一种“参考像素”。CSS2.1建议将996ppi作为参考像素。
			5.4.2.5 如何取舍？
				em是最灵活的。
		5.5 URL
			相对URL，是指url的值相对于该段url代码所在的文件的所在服务器路径。
			在CSS中，相对URL要相对于样式表本身，而不是相对于使用该样式表的HTML文档。
			url与开始括号之间不能有空格。否则整个声明都将无效。
		5.6 关键字
			5.6.1 inherit
				inherit是所有属性共有的。inherit使一个属性的值与其父元素的值相同。大多数情况下，不必指定继承，因为大多数属性本身会自然地继承。
				正常情况下，直接指定的样式总会优先于继承的样式，但是通过使用inherit可以把情况反过来。
		5.7 CSS2单位
			下面的单位都与声音样式表有关。
			5.7.1 角度值
				用于定义给定的声音从哪个位置发出。共有3种角度：度（deg）、梯度（grad）、弧度（rad）。这些值会被解释为0~360度范围内的度数。
			5.7.2 时间值
				用于指定语音元素之间的延迟。包括毫秒（ms）和秒（s）。
			5.7.3 频率值
				用于为语音浏览器可以产生的声音声明一个给定频率。频率值可以表示为赫兹（Hz）或兆赫（MHz），而且不能是负值。不区分大小写。


4 结构和层叠
	继承（Inheritance）是从一个元素向其后代元素传递属性值所采用的机制。确定应当向一个元素应用哪些值时，用户代理不仅要考虑继承，还要考虑声明的特殊性，另外需要考虑生命本身的来源。这个过程就称为层叠（cascade）。
	4.1 特殊性
		特殊性规则
			对于选择器给定的各个ID属性值，加0, 1, 0, 0。
			对于选择器中给定的各个类属性值、属性选择或伪类，加0, 0, 1, 0。
			对于选择器中给定的各个元素和伪元素，加0, 0, 0, 1。
			结合符和通配选择器对特殊性没有任何贡献。
		对于上述的值，优先级排序是从左向右的，值越大优先级越高。
		4.1.1 声明和特殊性
			
		4.1.2 通配选择器特殊性
			通配选择器的特殊性为0, 0, 0, 0。
			结合符没有特殊性。
		4.1.3 ID和属性选择器的特殊性
			ID选择器的优先级，高于属性选择器
		4.1.4 内联样式特殊性
			内联声明的特殊性是1, 0, 0, 0。
		4.1.5 重要性
			重要声明允许在这些声明的结束分号之前插入!important来标志。
			所有!important声明会分组在一起，重要声明的特殊性冲突会在重要声明内部解决，而不会与非重要声明相混。类似地，所有非重要声明也归为一组，使用特殊性来解决冲突。如果一个重要声明和一个非重要声明冲突，胜出的总是重要声明。
	4.2 继承
		基于继承机制，样式不仅应用到指定的元素，还会应用到他的后代元素。
		有些属性不能继承。一般地，大多数框模型属性（包括外边距、内边距、背景和边框）都不能继承。继承的值没有特殊性，甚至连0特殊性都没有。
	4.3 层叠
		4.3.1 CSS2.1的层叠规则
			4.3.1.1 找出所有相关的规则，这些规则都包含一个与给定元素匹配的选择器。
			4.3.1.2 按显示权重对应用到该元素的所有声明排序。标志!important的规则的权重要高于没有!important标志的规则。按来源对应用到给定元素的所有声明排序。共有3种来源：创作人员、读者和用户代理。正常情况下，创作人员的样式要胜过读者的样式。有!important标志的读者样式要强于所有其他样式，这包括有!important标志的创作人员样式。创作人员样式和读者样式都比用用户代理的默认样式要强。
			4.3.1.3 按特殊性对应用到给定元素的所有声明排序。有较高特殊性的元素权重要大于有较低特殊性的元素。
			4.3.1.4 按出现顺序对应用到给定元素的所有声明排序。一个声明在样式表或文档中越后出现，他的权重就越大。如果样式表中有导入的样式表，一般认为出现在导入样式表中的声明在前，主样式表中的所有声明在后。
		4.3.2 按权重和来源排序
			在声明权重方面要考虑5级，权重由大到小的顺序依次为：
				读者的重要声明
				创作人员的重要声明
				创作人员的正常声明
				读者的正常声明
				用户代理的声明
		4.3.3 按特殊性排序
			如果向一个元素应用多个彼此冲突的声明，而且它们的权重相同，则按特殊性排序，最特殊的声明优先。
		4.3.4 按顺序排序
			如果两个规则中的权重、来源和特殊性完全相同，那么在样式表中后出现的一个会胜出。
			CSS2.1中内联样式声明的特殊性要高于所有样式表选择器。
		4.3.5 非CSS表现提示
			非CSS提示被处理为特殊性为0，并出现在创作人员样式表的最前面。

3 选择器
	3.1 基本规则
		CSS的一个核心特性就是能向文档中的一组元素类型应用某些规则。
	3.2 规则结构
		每个规则都由两部分组成：选择器（selector）和声明块（declaration block）。声明块由一个或多个声明组成，每个声明是一个属性-值对（property-value）。每个样式表由一系列规则组成。
	3.3 元素选择器
		最常见的选择器往往是HTML元素。文档的元素就是最基本的选择器。
	3.4 声明和关键字
		声明块包含一个或多个声明。声明总有以下格式：一个属性后面跟一个冒号，再往后面是一个值，然后是一个分号。冒号和分号后面可以有0个或多个空格。几乎在所有情况下，值要么是一个关键字，要么是该属性可取关键字的一个列表（包括一个或多个关键字），关键字之间用空格分隔。如果声明中使用了不正确的属性或者不正确的值，整个声明都会被忽略。
	3.5 分组
		可以使用多个选择器，为这些选择器的元素应用同一个样式。
		3.5.1 选择器分组
			,
			将选择器用逗号隔开，然后在其后面跟上规则。
			通配选择器（universal selector），即 * 。这个选择器可以与任何元素匹配，就像是一个通配符。
		3.5.2 声明分组
			在声明块中，包含多个声明，就是声明分组。对声明分组时，一定要在各个声明的之后使用分号。
	3.6 结合选择器和声明的分组

	3.7 类选择器和ID选择器
		class selector，ID selector。
		3.7.1 类选择器
			.
			点号后面跟一个类名，构成类选择器。如.warning。warning需要在文档中以元素的class属性出现。
			HTML、XHTML中区分大小写。
		3.7.2 多类选择器
			一个class值中有可能包含一个词列表，各个词之间用空格分隔。
			通过把两个类选择器链接在一起仅可以选择同时包含这些类名的元素（类名的顺序不限）。
		3.7.3 ID选择器
			#
			ID选择器前面有一个#号，并引用HTML元素的id属性中的值。
			HTML、XHTML中区分大小写。
	3.8 属性选择器
		3.8.1 简单属性选择
			[]
			如果希望选择有某个属性的元素，而不论该属性的值是什么，可以使用一个简单属性选择器。
			如
				h1[class]
			带有class属性的所有h1元素都将适用于该规则。
			可以根据多个属性进行选择，只需将属性选择器链接在一起即可。
			如
				a[href][title]
			同时有href和title属性的HTML超链接将适用于该规则。
		3.8.2 根据具体属性值选择
			[ele='attr']
			可以选择具有特定值的元素。
			如
				a[href='https://www.google.com']
			href属性为https://www.google.com的a元素将适用于该规则。
			可以把多个属性-值选择器链接在一起来选择一个文档。这类似于简单属性选择器的多属性选择。
		3.8.3 根据部分属性值选择
			[key~='attr']
			如果属性能接受词列表（词之间用空格分隔），可以根据其中的任意一个词进行选择。
			如
				p[class~='warning']
			class属性中包含warning词的所有p元素将适用于该规则。
			该方式等价于点号类名记法。
			子串匹配属性选择器
				^='val'，选择属性值以'val'字符串开头的元素
				$='val'，选择属性值以'val'字符串结尾的元素
				*='val'，选择属性值包含'val'字符串的元素
		3.8.4 特定属性选择类型
			|='val'
			选择属性值等于'val'或以'val-'字符串开头的元素
	3.9 使用文档结构
		3.9.1 理解父子关系
			如果一个元素出现在文档层次结构中另一个元素的上一层，则称前者是后者的父元素。如果一个元素出现在另一个元素的下一层，则称前者是后者的子元素。
		3.9.2 后代选择器

			在一个后代选择器中，规则左边的选择器一端包括两个或多个用空格分隔的选择器。选择器之间的空格是一种结合符。
		3.9.2 选择子元素
			>
			元素后面跟一个>符号。
			如 
				h1 > strong
			匹配作为h1元素子元素的所有strong元素的情况。
		3.9.3 选择相邻兄弟元素
			+
			要选择紧接在另一个元素后的元素，而且二者有相同的父元素，可以使用相邻兄弟结合符（adjacentsibling combinator）：+。
			两个元素之间的文本内容不会影响相邻兄弟结合符起作用。
	3.10 伪类和伪元素
		3.10.1 伪类选择器
			伪类（pseudo-class）
			伪类选择器（pseudo-class selector）
			伪类、伪元素关键字前面都有一个冒号：:。
		3.10.2 链接伪类
			:link，指示作为超链接（即有一个href属性）并指向一个未访问地址的所有锚。
			:visited，指示作为已访问地址超链接的所有锚。
		3.10.3 动态伪类
			:focus，指示当前拥有输入焦点的元素，也就是说，可以接受键盘输入或者能以某种方式激活的元素。
			:hover，指示鼠标指针停留在哪个元素上，例如，鼠标指针可能停留在一个超链接上，:hover就会指示这个超链接。
			:active，指示被用户输入激活的元素，例如，鼠标指针停留在一个超链接上时，如果用鼠标点击，就会激活这个超链接，:active将会指示这个超链接。
		3.10.4 选择第一个子元素
			:first-child
			选择元素的第一个子元素。
			如
				p:first-child
			会选择所有所有p元素，且该p元素是其父元素的第一个子元素。
			伪类的实质，是把某种幻想类关联到与伪类相关的元素。
		3.10.5 根据语言选择
			:lang()
			从对应的模式来讲，该选择器就像是|=属性选择器。
			伪选择器与属性选择器之间的主要差别在于语言信息可以从很多来源得到，而且其中一些可能在元素之外。
		3.10.6 结合伪类
			如
				a:link:hover {color: red;}
			鼠标指针停留在未访问链接上时，让链接变为红色。
	3.11 伪元素选择器
		四个伪元素：设置首字母样式、设置第一行样式、设置之前和之后元素的样式。
		3.11.1 设置首字母样式
			:first-letter
			设置一个块级元素首字母的样式
		3.11.2 设置第一行的样式
			:first-line
			用来影响元素中的第一个文本行。
		3.11.3 :first-letter与:first-line的限制
			CSS2中，他们只能用于标记或段落之类的块级元素，而不能应用于超链接等的行内元素。CSS2.1中，:first-letter能应用到所有元素。
			另外，所有伪元素都必须放在出现该伪元素的选择器的最后面。
		3.11.4 设置之前和之后元素的样式
			:before
			:after


2 基本术语
	2.1 元素
		元素是文档结构的基础。p、table、span、a、div等都是元素。至少在CSS2.1中，每个元素生成一个框（box，也成为盒），其中包含元素的内容。
	2.2 替换和非替换元素
		2.2.1 替换元素
			替换元素（replaced element）是指用来替换元素内容的部分，并非由文档内容直接表示。如img。替换元素显示时也生成框。
		2.2.1 非替换元素
			其内容由用户代理（通常是一个浏览器）在元素本身生成的框中显示。段落、标题、表单元素、列表、和XHTML中的几乎所有元素都是非替换元素。
	2.3 元素显示角色
		2.3.1 块级元素
			块级元素生成一个元素框，（默认地）他会填充其父元素的内容区，旁边不能有其他元素。换句话说，他在元素框之前和之后生成了“分隔符”。如p、div。
		2.3.2 行内元素
			行内元素在一个文本行内生成元素框，而不会打断这行文本。如a、strong、em。这些元素不会在它本身之前或之后生成“分隔符”，所以可以出现在另一个元素的内容中，而不会破坏其显示。
		注意，此处的“块”、“行内”与XHTML中的块级、行内元素存在一个重要差别：在HTML和XHTML中，块级元素不能继承自行内元素（即不能嵌套在行内元素中）；但是在CSS中，对于显示角色如何嵌套不存在任何限制。

1 属性约定
	属性可取值语法：
		Value: [<length> | thick | thin]{1, 4}
		Value: [<family-name>,]*<family-name>
		Value: <url>?<color>[/<color>]?
		Value: <url> || <color>
	1.1 “<”和“>”之间的词给出了值的类型，或者是对另一个属性的引用。
	1.2 竖线分割(X|Y)，表示必须出现其中之一。
	1.3 双竖线(X||Y)，表示出现X或Y，或者二者都必须出现，但是必须以先X后Y的顺序出现(一说顺序不限)。
	1.4 中括号([...])用于分组。
	1.5 两项并列优先级高于双竖线，双竖线优先级高于单竖线。
	1.6 每个单词或加中括号的分组后面，可以跟以下修饰符之一：
		1.6.1 星号(*)指示前面的值或分组重复0或多次。
		1.6.2 加号(+)表示前面的值或分组可以重复1或多次。
		1.6.3 问号(?)表示前面的值或分组是可选的。
		1.6.4 大括号里的一对数({M,N})表示前面的值或分组至少重复M次，最多N次。
