Question
1 CSS中的用到的单位 1
	px, em，rem

P132_20210529_1|P125_20210528_0|P121_20210526_1|P110_20210525_2|P107_20210524_1P103_20210523_0|P095_20210520_1|P088_20210517_0
P083_20210515_0|P080_20210514_2|P073_20210513_2|P061_20210512_1|P052_20210511_0|P040_20210510_0
P025_20210507_0
P015_20210501_2

6 字体
	6.1 字体系列
		font-family
		CSS定义了5种通用字体系列：Serif字体、Sans-serif字体、Monospace字体、Cursive字体、Fantasy字体。
		6.1.1 使用通用字体系列
			可以使用属性font-family在文档中采用任何字体系列。
		6.1.2 指定字体系列
			可以在font-family里指定多个字体，各个字体之间使用逗号隔开，那么用户代理会根据所列值的先后顺序，查找相匹配的字体。
		6.1.3 使用引号
			只有当一个字体名中有一个或多个空格，或者如果字体名包括#或$之类的符号，才需要在font-family声明中加入引号。这不是必须的，但如果不加引号，可能会导致用户代理忽略这个特定的字体名。
			唯一必须加引号的是与所接受关键字匹配的字体名。
			通用字体系列名在指示具体的通用系列时，就不能加引号。
	6.2 字体加粗
		font-weight: normal | bold | bolder | lighter | 100 | 200 | 300 | 400 | 500 | 600 | 700 | 800 | 900 | inherit
		初始值： normal
		6.2.1 加粗如何起作用
		6.2.2 让字体更粗
			border
		6.2.3 让字体更细
			lighter
	6.3 字体大小
		font-size： xx-small | x-small | small | medium | large | x-large | xx-large | smaller | larger | <length> | <percentager> | inherit
		初始值：medium
		百分比：根据父元素的字体大小来计算
		计算值：绝对长度
		6.3.1 绝对大小
			xx-small | x-small | small | medium | large | x-large | xx-large | smaller | larger
		6.3.2 相对大小
			larger | smaller
			相对大小不必限制在绝对大小范围内。
		6.3.3 百分数和大小
			百分数值总是根据从父元素继承的大小来计算。
		6.3.4 字体大小和继承
			继承的是计算值而不是百分数。
			使用百分比时，由于每一次继承，用户代理可能都取了整数，所以可能会存在误差积累。
		6.3.5 使用长度单位
			值和单位一章中，任何单位都可以作为font-size的值。
	6.4 风格和变形
		font-style，font-variant
		6.4.1 有风格的字体


5 值和单位
	5.1 数字
		CSS中有两类数字：整数和实数（小数）。
	5.2 百分比
		数字后面跟一个百分号（%）
	5.3 颜色
		如颜色名、十六进制代码等
		5.3.1 命名颜色
			aqua、fuchsia、lime、olive、red、white、black、gray、maroon、orange、silver、yellow、blue、green、navy、purple、teal。
		5.3.2 用RGB指定颜色
			5.3.2.1 函数式RGB颜色
				语法一般是rgb(colorValue1, colorValue2, colorValue3)，其中colorValue*用一个百分数或整数三元组表示。百分数值再0%~100%范围内，整数范围为0~255。
			5.3.2.2 十六进制RGB颜色
				语法是#RRGGBB。
				如果组成十六进制数的3组数各自都是成对的，CSS还允许采用一种简写记法：#RGB。
			5.3.2.3 颜色汇总

			5.3.2.4 Web颜色安全
				Web安全颜色是指，在256色计算机系统上总能避免抖动的颜色。Web安全颜色可以表示为RGB值20%和51（相应的十六进制值为33）的倍数。另外，0%或0也是一个安全值。
	5.4 长度单位
		MDN中指出绝对长度单位有7个：
			单位 		名称	 					等价换算
			cm 			厘米 					1cm=96px/2.54
			mm 			毫米 					1mm=1/10th of 1cm
			Q 			四分之一毫米		1Q=1/40th of 1cm
			in 			英寸 					1in=2.54cm=96px
			pc 			十二点活字 		1pc=1/16th of 1in
			pt 			点 						1pt=1/72th of 1in
			px 			像素 					1px=1/96th of 1in
		MDN中指出相对长度单位有9个：
			单位 	相对于
			em 		在font-size中使用是相对于父元素的字体大小，	在其他属性中使用是相对于自身的字体大小，如width
			ex 		字符“x”的高度
			ch 		数字“0”的宽度
			rem 	根元素的字体大小
			lh 		元素的line-height
			vw 		视窗宽度的1%
			vh 		视窗高度的1%
			vmin 	视窗较小尺寸的1%
			vmax 	视窗大尺寸的1%

		5.4.1 绝对长度单位
			共有5种：
				英寸（in）：。
				厘米（cm）：1英寸是2.54厘米，1厘米等于0.394英寸。
				毫米（mm）：。
				点（pt）：印刷术语。1英寸是72点。
				派卡（pc）：印刷术语。1派卡相当于12点。
			5.4.1.1 处理绝对长度
				ppi，每英寸的实际像素数。
				绝对单位在定义打印文档的样式表时更为有用，在此通常会以英寸、点和派卡来度量长度。
		5.4.2 相对长度单位
			em、ex和px。
			5.4.2.1 em和ex单位
				1个“em”定义为一种给定字体的font-size值。如果一个元素的font-size为14像素，那么对于该元素，1em就等于14像素。
				另一方面，在设置字体的大小时，em的值会相对于父元素的字体大小改变。
				ex是指所用字体中小写x的高度。
			5.4.2.2 em和ex的实际问题
				ex的值不方便计算，所以有些用户代理会取em的值，然后再取其一半作为ex值。
			5.4.2.3 像素长度
				px，像素。显示器被划分为一个由小框组成的网格。每个框就是一个像素。如果将一个元素的高和宽顶定义为某个像素数，那么这个元素的高和宽就会由相应多个显示器元素组成。
			5.4.2.4 像素理论
				在讨论像素时，CSS规范建议，如果一个显示类型的设置与96ppi截然不同，用户代理应当把像素度量缩放为一种“参考像素”。CSS2.1建议将996ppi作为参考像素。
			5.4.2.5 如何取舍？
				em是最灵活的。
		5.5 URL
			相对URL，是指url的值相对于该段url代码所在的文件的所在服务器路径。
			在CSS中，相对URL要相对于样式表本身，而不是相对于使用该样式表的HTML文档。
			url与开始括号之间不能有空格。否则整个声明都将无效。
		5.6 关键字
			5.6.1 inherit
				inherit是所有属性共有的。inherit使一个属性的值与其父元素的值相同。大多数情况下，不必指定继承，因为大多数属性本身会自然地继承。
				正常情况下，直接指定的样式总会优先于继承的样式，但是通过使用inherit可以把情况反过来。
		5.7 CSS2单位
			下面的单位都与声音样式表有关。
			5.7.1 角度值
				用于定义给定的声音从哪个位置发出。共有3种角度：度（deg）、梯度（grad）、弧度（rad）。这些值会被解释为0~360度范围内的度数。
			5.7.2 时间值
				用于指定语音元素之间的延迟。包括毫秒（ms）和秒（s）。
			5.7.3 频率值
				用于为语音浏览器可以产生的声音声明一个给定频率。频率值可以表示为赫兹（Hz）或兆赫（MHz），而且不能是负值。不区分大小写。


4 结构和层叠
	继承（Inheritance）是从一个元素向其后代元素传递属性值所采用的机制。确定应当向一个元素应用哪些值时，用户代理不仅要考虑继承，还要考虑声明的特殊性，另外需要考虑生命本身的来源。这个过程就称为层叠（cascade）。
	4.1 特殊性
		特殊性规则
			对于选择器给定的各个ID属性值，加0, 1, 0, 0。
			对于选择器中给定的各个类属性值、属性选择或伪类，加0, 0, 1, 0。
			对于选择器中给定的各个元素和伪元素，加0, 0, 0, 1。
			结合符和通配选择器对特殊性没有任何贡献。
		对于上述的值，优先级排序是从左向右的，值越大优先级越高。
		4.1.1 声明和特殊性
			
		4.1.2 通配选择器特殊性
			通配选择器的特殊性为0, 0, 0, 0。
			结合符没有特殊性。
		4.1.3 ID和属性选择器的特殊性
			ID选择器的优先级，高于属性选择器
		4.1.4 内联样式特殊性
			内联声明的特殊性是1, 0, 0, 0。
		4.1.5 重要性
			重要声明允许在这些声明的结束分号之前插入!important来标志。
			所有!important声明会分组在一起，重要声明的特殊性冲突会在重要声明内部解决，而不会与非重要声明相混。类似地，所有非重要声明也归为一组，使用特殊性来解决冲突。如果一个重要声明和一个非重要声明冲突，胜出的总是重要声明。
	4.2 继承
		基于继承机制，样式不仅应用到指定的元素，还会应用到他的后代元素。
		有些属性不能继承。一般地，大多数框模型属性（包括外边距、内边距、背景和边框）都不能继承。继承的值没有特殊性，甚至连0特殊性都没有。
	4.3 层叠
		4.3.1 CSS2.1的层叠规则
			4.3.1.1 找出所有相关的规则，这些规则都包含一个与给定元素匹配的选择器。
			4.3.1.2 按显示权重对应用到该元素的所有声明排序。标志!important的规则的权重要高于没有!important标志的规则。按来源对应用到给定元素的所有声明排序。共有3种来源：创作人员、读者和用户代理。正常情况下，创作人员的样式要胜过读者的样式。有!important标志的读者样式要强于所有其他样式，这包括有!important标志的创作人员样式。创作人员样式和读者样式都比用用户代理的默认样式要强。
			4.3.1.3 按特殊性对应用到给定元素的所有声明排序。有较高特殊性的元素权重要大于有较低特殊性的元素。
			4.3.1.4 按出现顺序对应用到给定元素的所有声明排序。一个声明在样式表或文档中越后出现，他的权重就越大。如果样式表中有导入的样式表，一般认为出现在导入样式表中的声明在前，主样式表中的所有声明在后。
		4.3.2 按权重和来源排序
			在声明权重方面要考虑5级，权重由大到小的顺序依次为：
				读者的重要声明
				创作人员的重要声明
				创作人员的正常声明
				读者的正常声明
				用户代理的声明
		4.3.3 按特殊性排序
			如果向一个元素应用多个彼此冲突的声明，而且它们的权重相同，则按特殊性排序，最特殊的声明优先。
		4.3.4 按顺序排序
			如果两个规则中的权重、来源和特殊性完全相同，那么在样式表中后出现的一个会胜出。
			CSS2.1中内联样式声明的特殊性要高于所有样式表选择器。
		4.3.5 非CSS表现提示
			非CSS提示被处理为特殊性为0，并出现在创作人员样式表的最前面。

3 选择器
	3.1 基本规则
		CSS的一个核心特性就是能向文档中的一组元素类型应用某些规则。
	3.2 规则结构
		每个规则都由两部分组成：选择器（selector）和声明块（declaration block）。声明块由一个或多个声明组成，每个声明是一个属性-值对（property-value）。每个样式表由一系列规则组成。
	3.3 元素选择器
		最常见的选择器往往是HTML元素。文档的元素就是最基本的选择器。
	3.4 声明和关键字
		声明块包含一个或多个声明。声明总有以下格式：一个属性后面跟一个冒号，再往后面是一个值，然后是一个分号。冒号和分号后面可以有0个或多个空格。几乎在所有情况下，值要么是一个关键字，要么是该属性可取关键字的一个列表（包括一个或多个关键字），关键字之间用空格分隔。如果声明中使用了不正确的属性或者不正确的值，整个声明都会被忽略。
	3.5 分组
		可以使用多个选择器，为这些选择器的元素应用同一个样式。
		3.5.1 选择器分组
			,
			将选择器用逗号隔开，然后在其后面跟上规则。
			通配选择器（universal selector），即 * 。这个选择器可以与任何元素匹配，就像是一个通配符。
		3.5.2 声明分组
			在声明块中，包含多个声明，就是声明分组。对声明分组时，一定要在各个声明的之后使用分号。
	3.6 结合选择器和声明的分组

	3.7 类选择器和ID选择器
		class selector，ID selector。
		3.7.1 类选择器
			.
			点号后面跟一个类名，构成类选择器。如.warning。warning需要在文档中以元素的class属性出现。
			HTML、XHTML中区分大小写。
		3.7.2 多类选择器
			一个class值中有可能包含一个词列表，各个词之间用空格分隔。
			通过把两个类选择器链接在一起仅可以选择同时包含这些类名的元素（类名的顺序不限）。
		3.7.3 ID选择器
			#
			ID选择器前面有一个#号，并引用HTML元素的id属性中的值。
			HTML、XHTML中区分大小写。
	3.8 属性选择器
		3.8.1 简单属性选择
			[]
			如果希望选择有某个属性的元素，而不论该属性的值是什么，可以使用一个简单属性选择器。
			如
				h1[class]
			带有class属性的所有h1元素都将适用于该规则。
			可以根据多个属性进行选择，只需将属性选择器链接在一起即可。
			如
				a[href][title]
			同时有href和title属性的HTML超链接将适用于该规则。
		3.8.2 根据具体属性值选择
			[ele='attr']
			可以选择具有特定值的元素。
			如
				a[href='https://www.google.com']
			href属性为https://www.google.com的a元素将适用于该规则。
			可以把多个属性-值选择器链接在一起来选择一个文档。这类似于简单属性选择器的多属性选择。
		3.8.3 根据部分属性值选择
			[key~='attr']
			如果属性能接受词列表（词之间用空格分隔），可以根据其中的任意一个词进行选择。
			如
				p[class~='warning']
			class属性中包含warning词的所有p元素将适用于该规则。
			该方式等价于点号类名记法。
			子串匹配属性选择器
				^='val'，选择属性值以'val'字符串开头的元素
				$='val'，选择属性值以'val'字符串结尾的元素
				*='val'，选择属性值包含'val'字符串的元素
		3.8.4 特定属性选择类型
			|='val'
			选择属性值等于'val'或以'val-'字符串开头的元素
	3.9 使用文档结构
		3.9.1 理解父子关系
			如果一个元素出现在文档层次结构中另一个元素的上一层，则称前者是后者的父元素。如果一个元素出现在另一个元素的下一层，则称前者是后者的子元素。
		3.9.2 后代选择器

			在一个后代选择器中，规则左边的选择器一端包括两个或多个用空格分隔的选择器。选择器之间的空格是一种结合符。
		3.9.2 选择子元素
			>
			元素后面跟一个>符号。
			如 
				h1 > strong
			匹配作为h1元素子元素的所有strong元素的情况。
		3.9.3 选择相邻兄弟元素
			+
			要选择紧接在另一个元素后的元素，而且二者有相同的父元素，可以使用相邻兄弟结合符（adjacentsibling combinator）：+。
			两个元素之间的文本内容不会影响相邻兄弟结合符起作用。
	3.10 伪类和伪元素
		3.10.1 伪类选择器
			伪类（pseudo-class）
			伪类选择器（pseudo-class selector）
			伪类、伪元素关键字前面都有一个冒号：:。
		3.10.2 链接伪类
			:link，指示作为超链接（即有一个href属性）并指向一个未访问地址的所有锚。
			:visited，指示作为已访问地址超链接的所有锚。
		3.10.3 动态伪类
			:focus，指示当前拥有输入焦点的元素，也就是说，可以接受键盘输入或者能以某种方式激活的元素。
			:hover，指示鼠标指针停留在哪个元素上，例如，鼠标指针可能停留在一个超链接上，:hover就会指示这个超链接。
			:active，指示被用户输入激活的元素，例如，鼠标指针停留在一个超链接上时，如果用鼠标点击，就会激活这个超链接，:active将会指示这个超链接。
		3.10.4 选择第一个子元素
			:first-child
			选择元素的第一个子元素。
			如
				p:first-child
			会选择所有所有p元素，且该p元素是其父元素的第一个子元素。
			伪类的实质，是把某种幻想类关联到与伪类相关的元素。
		3.10.5 根据语言选择
			:lang()
			从对应的模式来讲，该选择器就像是|=属性选择器。
			伪选择器与属性选择器之间的主要差别在于语言信息可以从很多来源得到，而且其中一些可能在元素之外。
		3.10.6 结合伪类
			如
				a:link:hover {color: red;}
			鼠标指针停留在未访问链接上时，让链接变为红色。
	3.11 伪元素选择器
		四个伪元素：设置首字母样式、设置第一行样式、设置之前和之后元素的样式。
		3.11.1 设置首字母样式
			:first-letter
			设置一个块级元素首字母的样式
		3.11.2 设置第一行的样式
			:first-line
			用来影响元素中的第一个文本行。
		3.11.3 :first-letter与:first-line的限制
			CSS2中，他们只能用于标记或段落之类的块级元素，而不能应用于超链接等的行内元素。CSS2.1中，:first-letter能应用到所有元素。
			另外，所有伪元素都必须放在出现该伪元素的选择器的最后面。
		3.11.4 设置之前和之后元素的样式
			:before
			:after


2 基本术语
	2.1 元素
		元素是文档结构的基础。p、table、span、a、div等都是元素。至少在CSS2.1中，每个元素生成一个框（box，也成为盒），其中包含元素的内容。
	2.2 替换和非替换元素
		2.2.1 替换元素
			替换元素（replaced element）是指用来替换元素内容的部分，并非由文档内容直接表示。如img。替换元素显示时也生成框。
		2.2.1 非替换元素
			其内容由用户代理（通常是一个浏览器）在元素本身生成的框中显示。段落、标题、表单元素、列表、和XHTML中的几乎所有元素都是非替换元素。
	2.3 元素显示角色
		2.3.1 块级元素
			块级元素生成一个元素框，（默认地）他会填充其父元素的内容区，旁边不能有其他元素。换句话说，他在元素框之前和之后生成了“分隔符”。如p、div。
		2.3.2 行内元素
			行内元素在一个文本行内生成元素框，而不会打断这行文本。如a、strong、em。这些元素不会在它本身之前或之后生成“分隔符”，所以可以出现在另一个元素的内容中，而不会破坏其显示。
		注意，此处的“块”、“行内”与XHTML中的块级、行内元素存在一个重要差别：在HTML和XHTML中，块级元素不能继承自行内元素（即不能嵌套在行内元素中）；但是在CSS中，对于显示角色如何嵌套不存在任何限制。

1 属性约定
	属性可取值语法：
		Value: [<length> | thick | thin]{1, 4}
		Value: [<family-name>,]*<family-name>
		Value: <url>?<color>[/<color>]?
		Value: <url> || <color>
	1.1 “<”和“>”之间的词给出了值的类型，或者是对另一个属性的引用。
	1.2 竖线分割(X|Y)，表示必须出现其中之一。
	1.3 双竖线(X||Y)，表示出现X或Y，或者二者都必须出现，但是必须以先X后Y的顺序出现(一说顺序不限)。
	1.4 中括号([...])用于分组。
	1.5 两项并列优先级高于双竖线，双竖线优先级高于单竖线。
	1.6 每个单词或加中括号的分组后面，可以跟以下修饰符之一：
		1.6.1 星号(*)指示前面的值或分组重复0或多次。
		1.6.2 加号(+)表示前面的值或分组可以重复1或多次。
		1.6.3 问号(?)表示前面的值或分组是可选的。
		1.6.4 大括号里的一对数({M,N})表示前面的值或分组至少重复M次，最多N次。
