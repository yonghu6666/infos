Read Twice
  C18 connection and termination of TCP
  C21 timeout and retransmition of TCP

.|20.10.30_2_P317|20.10.27_0_P317
.|20.09.16_0_P315
.|20.08.18_1_P311|20.08.17_1_P308
_|20.08.07_1_P305
_|20.07.31_1_P300|20.07.30_2_P298|20.07.29_1_P294|20.07.28_1_P290
_|20.07.24_0_P288|20.07.23_1_P283|20.07.22_0_P279|20.07.21_0_P278
_|20.07.19_0_P274|20.07.15_0_P273
_|20.07.09_2_P271|20.07.06_1_P268
_|20.06.29_0_P265
_|20.06.28_0_P264|20.06.25_1_P263|20.06.23_0_P260|20.06.22_2_P256
_|20.06.21_0_P254|20.06.19_0_P252|20.06.17_0_P250
_|20.06.11_1_P248|20.06.10_0_P246|20.06.08_2_P243
_|20.06.05_0_P240|20.06.04_1_P236|20.06.03_1_P232|20.06.01_1_P229
_|20.05.31_0_P226|20.05.30_0_P222|20.05.29_1_P220|20.05.28_1_P219|20.05.27_1_P216|20.05.26_2_P211|20.05.25_0_P209
.|20.05.24_1_P206|20.05.23_2_P204|20.05.22_1_P203|20.05.21_1_P202|20.05.20_1_P201|20.05.19_0_P200|20.05.18_0_P197
.|20.05.22_1_P203|20.05.21_1_P202|20.05.20_1_P201|20.05.19_0_P200|20.05.18_0_P197
.|20.04.19_0_P196
_|20.03.31_1_P195|20.03.30_1_P193|20.03.29_1_P191|20.03.28_0_P190|20.03.25_1_P189|20.03.24_0_P187|20.03.23_0_P184
_|20.03.22_0_P182|20.03.21_0_P180|20.03.20_0_P177|20.03.17_0_P176
_|20.03.15_0_P175|20.03.14_0_P173|20.03.12_1_P169|20.03.10_1_P166|20.03.10_1_P165
.|20.03.07_1_P164
.|20.01.11_0_P163
.|20.01.05_1_P162|20.01.03_1_P161|20.01_02_1_P158|20.01.01_1_P155|19.12.31_1_P153|19.12.30_0_P152
.|19.12.29_1_P149|19.12.28_0_P147|19.12.26_0_P142|19.12.25_0_P140|19.12.24_0_P136|19.12.23_0_P134
.|19.12.21_0_P131|19.12.19_1_P129|19.12.18_1_P128|19.12.17_0_P125|19.12.16_1_P121
.|19.12.14_1_P117|19.12.10_0_P116
.|19.12.02_0_P114|19.12.01_0_P113|19.11.30_1_P111|19.11.29_0_P110
.|19.11.15_0_P108|19.11.14_0_P104|19.11.12_1_P101
.|P96_1_19.11.06|P92_1_19.11.05|P88_1_19.11.01|P86_0_19.10.31|P80_0_19.10.30|P78_0_19.10.28
.|P75_0_19.10.24|P73_0_19.10.23|P70_1_19.10.22
.|P69_1_19.10.18|P67_1_19.10.16|P65_0_19.10.15|P63_2_19.10.14
.|P61_1_19.10.12|P59_1_19.10.11|P55_0_19.10.10|P55_1_19.10.08
_|P53_0_19.09.29|P50_0_19.09.27|P46_1_19.09.26|P39_1_19.09.25|P35_1_19.09.24|P32_1_19.09.23
.|P31_1_19.09.22|P30_0_19.09.21|P28_1_19.09.20|P28_0_19.09.19|P24_1_19.09.18
_|P22_0_19.09.11|P21_0_19.09.10|P17|P14_0|P10_19.09.01
_，sequence；.，unsequences; 0，First Paragraph；1，First Chapter；2，Last Paragraph.




【29】.远程登录
  Telnet
    telecommunication network protocol，电信网络协议
  Rlogin
    服务器到客户的Rlogin的命令：
      0x02，清仓输出。客户丢弃所有从服务器收到的数据，直到命令字节（紧急数据的最后一个字节）。客户还丢弃任何有可能被缓存的挂起输出(pending output)。当服务器收到客户发出的中断命令时，就发送此命令。
      0x10，客户停止执行流量控制。
      0x20，客户继续进行流量控制处理。
      0x80，客户立即响应，将当前窗口大小发送给服务器，并在今后当窗口大小变化时通知服务器。通常，当连接建立后，服务器就立即发送此命令。
    客户端到服务器的命令：
      将当前窗口大小发送给服务器。
      当客户的窗口大小发生变化时，客户并不立即向服务器报告，除非收到了服务器发来的0x80命令。
      发送该命令时，，需要在0xff后紧跟着发送两个特殊的标识字节，使服务器识别到是该命令。对于窗口大小命令，这两个标志字节是ASCII码的字符's'。之后是4个16bit长的数据（按网络字节顺序），分别是：行数，每列的字符数，X方向的像素数量，Y方向的像素数量。
  Telnet
    NVT，Network Virtual Terminal，网络虚拟终端，虚拟设备。
    NVT ASCII，7bit的ASCII字符集，网间协议都使用NVT ASCII。每个7bit的字符都以8bit格式发送，最高位bit为0。FTP,SMTP,Finger,Whois协议都以该协议描述客户命令和服务器的响应。
    Telnet通信的两个方向都采用带内信令方式。0xff（十进制的255）叫做IAC（interpret as command，意思是“作为命令解释”）。该字节后面的一个字节才是命令字节。

【28】.简单网络管理协议
  SNMP
  SNMP协议分为三部分：公共SNMP首部，get/set首部，get/set变量部分。
  公共SNMP首部：版本（0）；共同体；PDU类型（0-3）。get/set首部：请求标识；差错状态（0-5）；差错索引。get/set变量部分：名称；值；名称；值...。
  PDU
    协议数据单元，也就是分组。
    PDU类型：0，get-request；1，get-next-request；2，get-response；3，set-request；4，trap。
    PDU的值为4时，除了SNMP首部的协议内容，分为trap首部、有意义的变量。trap首部：企业；代理地址；trap类型（0-6）；特定代码；时间戳。有意义的变量：名称；值；名称；值...。
    差错状态说明：0，noError，没有错误；1，tooBig，代理进程无法把响应放在一个SNMP消息中发送；2，noSuchName，操作一个不存在的变量；3，badValue，set操作的值或语义有错误；4，readOnly，管理进程试图修改一个只读变量；5，genErr，其他错误。
  MIB
    管理信息库，所有代理进程包含的、并且能够被管理进程进行查询和设置的信息的集合。
  SMI 
    管理信息机构，关于MIB的一套公用的结构和表示符号。
  UDP组下的简单变量
    udpInDatagrams，counter，UDP数据报输入数；
    udpNoPorts，counter，没有发送到有效端口的UDP数据报个数；
    udpInErrors，counter，接收到的有错误的UDP数据报个数（例如检验错误）；
    udpOutDatagrams，counter，UDP数据报输出数。
  udpTable中的变量
    udpLocalAddress，IpAddress，监听进程的本地IP地址。0.0.0.0代表接收任何接口的数据报；
    udpLocalPort，[0..65535]，监听进程的本地端口号。
  分组的所有数据路径都是被计数的。
  实例标识
    简单变量
      对简单变量的处理方法，是通过在其对象标识后添加“.0”来处理的
    表格

    字典式排序
      MIB中按照对象标识进行排序时，有一个隐含的排序规则。MIB表格是根据其对象标识按照字典的顺序进行排序的。
      在表格中，一个给定变量的所有实例都在下个变量的所有实例之前显示。即表格的操作顺序是“先列后行”的次序。
      表格中对行的排序和表格中索引的值有关。
    如何从SNMP代理进程处获取变量的值
      用ISODE系统中的snmpi软件查询。
  管理信息库
    system组
    interface组
    at组
      地址转换组
    ip组
      定义了多个简单变量和3个表格变量
      表格变量包括：IP地址表、IP路由表、地址转换表。
    icmp组
      icmp组包含4个普通计数器变量：ICMP报文的输出和输入数量以及ICMP差错报文的输入和输出数量；22个其他ICMP报文数量的计数器：11个是输出计数器，另外11个是输入计数器。
    tcp组
      14个简单变量；表格变量：即TCP连接表。
      TCP连接表：
        tcpConnState，[1，12]，可读可写。连接状态：1=CLOSED,2=LISTEN,3=SYS_SEND,4=SYS_RCVD,5=ESTABLISHED,6=FIN_WAIT,7=FIN_WAIT,8=CLOSED_WAIT,9=LAST_ACK,10=CLOSING,11=TIME_WAIT,12=DELETE TCB。管理进程对此变量可以设置的唯一值就是12（例如，立即终止次连接）
        tcpConnLocalAddress，IpAddress，本地IP地址。0.0.0.0代表监听进程愿意在任何接口接收连接。
        tcpConnLocalPort，[1...65535]，本地端口号。
        tcpConnRemAddress，IpAddress，远程IP地址。
        tcpConnRemPort，[1...65535]，远程端口号。
    接口MTU
    路由表
    Trap
      trap类型：0，coldStart，代理进程对自己初始化；1，warmStart，代理进程对自己重新初始化；2，linkDown，一个接口已经从工作状态改变为故障状态，报文中的第一个变量标识此接口；3，linkUp，一个接口已经从故障状态改变为工作状态，报文中的第一个变量标识此接口；4，authenticationFailure，从SNMP管理进程收到无效共同体的报文；5，egpNeighborLoss，一个EGP临站已变为故障状态，报文中的第一个变量包含此临站的IP地址；6，enterpriceSpecific，在这个特定的代码字段中查找trap信息。
【27】.TCP的未来和性能
  路径MTU发现
  TCP的时间戳选项的PAWS(Protection Against Wrapped Sequence numbers)算法
    保护回绕的序号
  窗口扩大选项
    窗口扩大选项使TCP的窗口定义从16bit增加到32bit。
    这个选项只能够出现在一个SYN报文段中，因此当连接建立起来后，在每个方向的扩大因子是固定的。
  时间戳选项
    接收方更新时间戳算法：1)TCP跟踪下一个ACK中将要发送的时间戳的值（一个名为tsrecent的变量），以及最后发送的ACK中的确认序号（一个名为lastack的变量）。这个序号就是接收方期望的序号；2)当一个包含有字节号lastack的报文段到达时，则该报文段中的时间戳被保存在tsrecent中；3)无论何时发送一个时间戳选项，tsrecent就作为时间戳回显应答字段被发送，而序号字段被保存在lastack中。
  PAWS
    防止回绕的序号
    接收方将时间戳视为序列号的一个32bit的扩展。PAWS算法不需要在发送方和接收方之间进行任何形式的时间同步。接收方所需要的就是时间戳的值应该单调递增，并且每个窗口至少增加1。
  T/TCP
    为事务用的TCP扩展
    SPT，Server Processing Time，服务器处理请求的时间

【26】.TCP的保活定时器
	保活不是TCP规范中的一部分。Host Requirements RFC提供了3个不使用保活定时器的理由：
    1)在出现短暂差错的情况下，这可能会使一个非常好的连接释放掉；
    2)他们耗费不必要的带宽；
    3)在按分组计费的情况下会在互联网上花掉更多的钱。
  如果一个给定的连接在两给小时之内没有任何动作，则服务器就像客户发送一个探查报文段。客户主机一定处于以下4个状态之一：
    1)客户主机依然正常运行，并且服务器可达。此时服务器端应用程序没有感觉到保活探查的发生。
    2)客户主机已经崩溃，并且关闭或者正在重新启动。此时客户的TCP没有响应。服务器将不能够收到对探查的响应，并在75秒后超时。服务器总共发送10个这样的探查，每个间隔75秒。如果服务器没有收到一个响应，它就认为客户主机已经关闭并终止连接。此时的差错信息是“连接超时”的类型。
    3)客户主机崩溃并已经重新启动。这时服务器将收到一个对其保活探查的响应，但是这个响应是一个复位，使得服务器中止这个连接。此时的差错是“连接被对方复位”的类型。
    4)客户主机正常运行，但是从服务器不可达。此时差错看起来像是“连接超时”的类型。
  保活探查器的序号字段，陛下一个要发送的序号字段小1。正是如此，服务器的TCP对保活探查进行响应。
【25】.TCP的坚持定时器
  窗口探查
    TCP不对ACK报文段进行确认，TCP只确认那些包含有数据的ACK报文段。这将导致接收方的不包含数据的ACK的丢失。如果接收方发送的将窗口大小从0变为非0的ACK丢失，那么将导致发送、接收方死锁的情况：接收方等待接收数据，而发送方在等待允许它继续发送数据的窗口更新。为了避免这一状况，发送方使用一个坚持定时器(persist timer)来周期性地向接收方查询，以便发现窗口是否已增大。这种从发送方发出的报文段，被称为窗口查探(window probe)。
  坚持定时器算法
    计算坚持定时器时，使用了普通的TCP指数退避。即：首次超时时间 * (2^N)。坚持定时器总是在5-60秒之间。
  坚持状态与重传超时之间一个不同的特点是，TCP从不放弃发送窗口探查。这些探查每隔60秒发送一次，这个过程将持续到窗口被打开，或者应用程序使用的连接被终止。
  糊涂窗口综合征
    SWS，Silly Window Syndrome。
    少量的数据将通过连接进行交换，而不是满长度的报文段。
    该现象可发生在两端中的任何一端：接收方可以通告一个小的窗口（而不是一直等到大的窗口才通告），而发送方也可以发送少量的数据（而不是等大其他的数据以便发送一个大的报文段）。
    避免措施
      1)接收方不通告小窗口。通常的算法是接收方不通告一个比当前窗口大的窗口（可以为0），除非窗口可以增加一个报文段大小（也就是将要接收到的MSS），或者可以增加接收方缓存空间的一半，不论实际有多少。
      2)发送方在满足以下条件之一时才发送数据：(a)可以发送一个满长度的报文段；(b)可以发送至少是接收方通告窗口大小一半的报文段；(c)可以发送任何数据并且不希望接收ACK（也就是说，我们没有还未被确认的数据），或者该连接上不能使用Nagle算法。



【24】.TCP的超时与重传
  TCP管理的4个不同的定时器
    1)重传定时器使用于当希望收到另一端的确认。
    2)坚持(persist)定时器使窗口大小信息保持不断流动
    3)保活(keepalive)定时器可检测到一个空闲连接的另一端何时崩溃或重启
    4)2MSL定时器检测一个连接处于TIME_WAIT状态的时间
  指数退避算法
    TCP的指数退避算法，是指重传延迟是前一次延迟时间的1倍，直到达到64s。
  往返时间，Round Trip Time，RTT
    RTT估计器：R = αR + (1 - α)M
    α是一个推荐值为0.9的平滑因子，M为刚得到的RTT。
  重传超时时间(Retransmission Timeout, RTO)
    RTO = Rβ
    β是一个推荐值为2的时延离散因子。
    在往返时间变化起伏很大时，基于均值和方差来计算RTO，将比用均值的常数倍数来计算RTO，能提供更好的响应。
  根据每个RTT测量M的公式
    Err = M - A
    A = A + gErr
    D = D + H(|Err| - D)
    RTO = A + 4D
    A是被平滑的RTT（均值的估计器），D是被平滑的均值偏差。Err是刚得到的测量结果与当前的RTT估计器之差。A和D均被用于计算下一个重传时间RTO。增量g起平均作用，取为1/8.偏差的增益是h，取为0.25。当RTT变化时，较大的偏差增益将使RTO快速上升。
  Karn算法
    假定一个分组被发送，当超时发生时，RTO进行指数退避，分组以更长的RTO进行重传，然后收到一个确认。那么这个ACK是针对第一个分组，还是针对第二个分组呢？这就是所谓的重传多义性问题。
    Karn算法规定，当一个超时和重传发生时，在重传数据的确认最后到达之前，不能更新RTT估计器，因为我们并不知道ACK对应哪次传输。并且，由于数据被重传，RTO已经得到了一个指数退避，我们在下一次传输时使用这个退避后的RTO。对一个没有被重传的报文段而言，除非收到了一个确认，否则不要计算新的RTO。
  拥塞避免算法
    拥塞避免算法是一种处理丢失分组的方法。
    拥塞避免算法和慢启动算法是两个目的不同、独立的算法。当拥塞发生时，我们希望降低分组进入网络的传输速率，于是可以调用慢启动来做到这一点。在实际中，这两个算法通常在一起实现。
    拥塞避免算法和慢启动算法需要对每个连接维持两个变量：一个拥塞窗口cwnd，一个慢启动门限ssthresh。工作流程如下：
      1)对一个给定的连接，初始化cwnd为1个报文段，ssthresh为65535个字节。
      2)TCP输出例程的输出不能超过cwnd和接收方通告窗口的大小。拥塞避免是发送方使用的流量控制，而通告窗口则是接收方进行的流量控制。前者是发送方感受到的网络拥塞的估计，而后者则与接收方在该连接上的可用缓存大小有关。
      3)当拥塞发生时（超时或收到重复确认），ssthresh被设置为当前窗口大小的一半（cwnd和接收方通告窗口的最小值，但最少是2个报文段）。此外，如果是超时引起了拥塞，则cwnd被设置为1个报文段（这就是慢启动）。
      4)当新的数据被对方确认时，就增加cwnd，但增加的方法依赖于我们是否正在进行慢启动或拥塞避免。如果cwnd小于或等于ssthresh，则正在进行慢启动，否则正在进行拥塞避免。慢启动一直持续到我们回到当拥塞发生时所处位置的一半的时候才停止（因为我们记录了在步骤2中给我们制造麻烦的窗口大小的一半），然后转为执行拥塞避免。
    拥塞避免算法要求每次收到一个确认时，，将cwnd增加1。我们希望在一个往返时间内，最多为cwnd增加一个报文段。
  快速重传与快速恢复算法

  ICMP差错
    TCP能够遇到的最常见的ICMP差错就是源站抑制、主机不可达、网络不可达。
  重新分组
    当TCP超时并重传时，它不一定要重传同样的报文段。相反，TCP允许进行重新分组而发送一个较大的报文段，这将有助于提高性能。

【23】.TCP的成块数据流
  滑动窗口协议
    可用于TCP的流量控制。该协议允许发送方在停止并等待确认前可以连续发送多个分组。
  TCP滑动窗口左右边沿的运动
    1).窗口左边沿向右边沿靠近称为窗口合拢。这种现象发生在数据被发送和确认时。
    2).当窗口有边沿向右移动时将允许发送更多的数据，称为窗口张开。这种现象发生在另一端的接收进程读取已经确认的数据，并释放了TCP的接收缓存时。
    3).当有边沿向左移动时，称为窗口收缩。
  慢启动算法
    如果在发送方和接收方之间存在多个路由器和速率较慢的链路时，就有可能出现一些问题。一些中间路由器必须缓存分组，并有可能耗尽存储器的空间。
    慢启动算法，是指通过观察到新分组进入网络的速率，应该与另一端返回确认的速率相同而进行工作。
    慢启动为发送方的TCP增加了另一个窗口：拥塞窗口(congrestion window)，记为cwnd。当与另一个网络的主机建立TCP连接时，拥塞窗口被初始化为1个报文段（即另一端通告的报文段大小）。每收到一个ACK，拥塞窗口就增加一个报文段。发送方取拥塞窗口与通告窗口中的最小值作为发送上限。拥塞窗口是发送方使用的流量控制，而通告窗口则是接收方使用的流量控制。
  带宽时延乘积
  	通道的容量：capacity(bit) = bandwidth(b/s) * round-trip time(s)
      容量(bit) = 带宽(b/s) * RTT(s)
  紧急数据
  	可以通过设置TCP首部中的两个字段来，发出这种从一端到另一端的，紧急数据已经被放置在数据流中的通知。URG比特被置为1，并且一个16bit的紧急指针被置为一个正的偏移量，该偏移量必须与TCP首部中的序号字段相加，以便得出紧急数据的最后一个字节的序号。

【22】.TCP的交互数据流
  TCP需要实现一个经受时延的ACK，且时延必须小于500ms。同时，必须为应用提供一种方法来关闭该算法在某个连接上执行。
  Nagle算法
    一个TCP连接上最多只能有一个未被确认的未完成的小分组，在该分组的确认到达之前不能发送其他的小分组。相反，TCP收集这些少量的分组，并在确认到来时以一个分组的方式发出去。

【21】.TCP连接的建立与终止
  建立连接，三次握手
    请求端（客户）发送一个SYN段指明客户打算连接的服务器的端口，以及初始序号（ISN）。
    服务器发回包含服务器的初始序号的SYN报文段作为应答。同时，将确认序号设置为客户的ISN加1以对客户的SYN报文段进行确认。1个SYN将占用1个序号。
    客户必须将确认序号设置为服务器的ISN加1以对服务器的SYN报文段进行确认。
  断开连接，四次握手
    当服务器收到一个FIN，它发回一个ACK，确认序号为收到的序号加1。和SYN一样，一个FIN将占用一个序号。同时TCP服务器还向应用程序（即丢弃服务器）传送一个文件结束符。接着这个服务器程序就关闭它的连接，导致它的TCP端发送一个FIN，客户必须发回一个确认，并将确认序号设置为收到的序号加1。
    首先进行关闭的乙方（即第一个发送FIN）将执行主动关闭，而另一方（收到这个FIN）执行被动关闭。通常一方完成主动关闭而另一方完成被动关闭。
  建立连接的过程中，发送第一个SYN的一端将执行主动打开(active open)。接收这个SYN并发回下一个SYN的另一端执行被动打开(passive open)。
  当一端为建立连接而发送他的SYN时，它为连接选择一个初始序号。ISN随时间而变化，因此每一个连接都将具有不同的ISN。RFC739指出ISN可看作是一个32bit的计数器，每4ms加1。这样选择序号的目的在于防止在网络中被延迟的分组在以后又被传送，而导致某个连接的一方对它做错误的解释。
  MSS
    最大报文段长度，表示TCP传往另一端的最大数据块的长度。如果目的IP地址为“非本地的(nonlocal)”，MSS通常的默认值是536。
  2MSL等待状态
    TIME_WAIT状态。每个具体TCP实现必须选择一个报文段最大生存时间MSL(Maximun Segment Lifetime)。对一个具体实现所给定的MSL值，处理的原则是：当TCP执行一个主动关闭，并发回最后一个ACK，该连接必须在TIME_WAIT状态停留的时间为2倍的MSL。这样可让TCP再次发送最后的ACK以防止这个ACK丢失(另一端超时并重发最后的FIN)。
    执行主动关闭的一端，会进入2MSL等待状态。在此期间，在该端使用这个4元组将是无效的：该端的IP地址及端口号、另一端的IP地址及端口号。执行被动关闭时，通常不会进入2MSL等待状态。
  TCP服务器的设计
    

【20】.TCP
  TCP，传输控制协议，使用网络层协议（IP协议）。
  TCP提供一种面向连接的、可靠的字节流服务。
  面向连接意味着两个使用TCP的应用在彼此交换数据之前必须先建立一个TCP连接。
  TCP提供可靠性的方式：
    1.应用程序被分割为TCP认为最适合发送的数据块。
    2.当TCP发出一个段后，它将启动一个定时器，等待目的端确认收到这个报文段。如果不能及时收到一个确认，将重发这个报文段。这牵涉到TCP协议的自适应的超时及重传策略。
    3.当TCP收到发送自TCP连接的另一端的数据，它将发送一个确认。这个确认不是立即发送，通常将推迟几分之一秒。
    4.TCP将保持它首部和数据的检验和。
    5.由于接收到的TCP报文段可能是失序的，所以如有必要，TCP将对收到的数据进行重新排序，将收到的数据以正确的顺序交给应用层。
    6.既然IP数据报会发生重复，TCP的接收端必须丢弃重复的数据。
    7.TCP还能提供流量控制。TCP连接的每一方都有固定大小的缓冲空间。TCP的接收端只允许另一端发送接收端缓冲区所能接纳的数据。
  两个应用程序通过TCP连接交换8bit字节构成的字节流。TCP不在字节流中插入记录标识符。这被称为字节流服务（byte stream service）。
  包含TCP数据的IP数据报：IP首部（20bytes）+TCP报文段。
  TCP报文段：TCP首部（20bytes）+ TCP数据。
  TCP首部：
    源端口号（0-15bit）。
    目的端口号（16-31bit）。
    序号（32-63bit）。
    确认序号（64-95bit）。
      包含发送确认的一端所期望收到的下一序号。只有ACK标志为1时，确认序号才有效。
    首部长度（96-99bit）。
      给出首部中32bit字的数目。需要这个值是因为任选字段的长度是可变的。由于该字段占4bit，因此TCP最多有60bytes的首部。如果没有任选字段，正常的长度是20字节。
    保留字段（100-105bit）。
    URG（106-106bit），紧急指针有效。
    ACK（107-107bit），确认序号有效。
      一旦一个连接建立起来，ACK标志总是被设置为1。
    PSH（108-108bit）。
      接收方应该尽快将这个报文段交给应用层。
      发送方使用该标志通知接收方将所受到的数据全部提交给接收进程。这里的数据包括与PUSH一起传送的数据，以及接收方TCP已经为接收进程收到的其他数据。
    RST（109-109bit），重建连接。
    SYN（110-110bit），同步序号。
      用来发起一个连接。当建立一个新的连接时，SYN标志变1。
    FIN（111-111bit），发端完成发送任务。
    窗口大小（112-127bit）。
      TCP的流量控制由连接的每一端通过声明的窗口大小来提供。窗口大小为字节数，起始于确认序号字段指明的值，这个值是接收端正期望接受的字节。窗口大小是一个16bit字段，因而窗口大小最大为65535bytes。
    检验和（128-143bit）。
    紧急指针（144-159bit）。
      当URG标志置1时，该字段生效。紧急指针是一个正的偏移量，和序号字段中的值相加，表示紧急数据最后一个字节的序号。TCP的紧急方式是发送端向另一端发送紧急数据的一种方式。
    选项。
      最常见的可选字段是最长报文大小，又称为MSS(Maximun Segment Size)。每个连接方通常都在通信的第一个报文段(为建立连接而设置SYN标志的那个段)中指明这个选项。它指明本端所能接收的最长长度的报文段。
      选项表结束：kind=0，1byte；
      无操作：kind=1，1byte；
      最大报文段长度：kind=2，1byte；len=4，1byte；最大报文段长度，2byte；
      窗口扩大因子：kind=3，1byte；len=3，1byte；移位数，1byte；
      时间戳：kind=8，1byte；len=10，1byte；时间戳，4byte；时间戳回显应答，4byte。
    数据。
  TCP为应用层提供全双工服务。这意味着数据能在两个方向上独立地进行传输。因此，连接的每一端必须保持每个方向上的传输数据序号。
  

【19】.BOOTP
  BOOTP，引导程序协议，使用UDP协议。
  包含BOOTP协议的UDP协议：UDP首部（8bytes）+ BOOTP协议（300bytes）。
    操作码，0-7bit，1表示请求，2表示应答。
    硬件类型，8-16bit，1表示10Mb/s的以太网。
    硬件地址长度，16-23bit，以太网为6。
    跳数，24-31bit，由客户设置为0，但也能被一个代理服务器设置。
    事务标识，32-63bit，由客户设置并由服务器返回的32bit整数，客户用它对请求和应答进行匹配，对每个请求，客户应该将该字段设置为一个随机数。
    秒数，64-79bit，客户开始进行引导时，将该字段设置为一个时间值。服务器能够看到这个时间值，备用服务器在等待时间超过这个时间值后才会响应客户的请求，这意味着主服务器没有启动。
    80-95bit，未使用。
    客户IP地址，4byte，如果该客户已经知道了自身的IP地址，它将写入该字段。否则，它将该字段设置为0。
    你的IP地址，4byte，当客户IP字段被设置为0时，服务器会用客户的IP地址写入到该字段中。
    服务器IP地址，4byte，由服务器填写。
    网关IP地址，4byte，如果使用了某个代理服务器，则该代理服务器就填写该字段。
    客户主机硬件地址，16byte，必须由客户设置。尽管这个值与以太网数据帧头中的值相同，UDP数据报中也设置这个字段，但任何接收这个数据报的用户进程能很容易地获得它。一个进程通过查看UDP数据报来确定以太网帧首部中的该字段，通常是很困难的。
    服务器主机名，64byte，它是一个空值终止串，由服务器填写。
    引导文件名，128byte，服务器会将用于系统引导的文件名及其所在位置的路径全名写入该字段。
    特定厂商信息，64byte，用于对BOOTP协议进行不同的扩展。
  端口
    BOOTP有两个熟知端口：BOOTP服务器为67，BOOTP客户为68。
【18】.TFTP
  Trivial File Tansfer Protocal，简单文件传送协议
  TFTP协议使用UDP协议。即UDP协议：UDP首部（8bytes）+ TFTP协议。
【17】.DNS
  域名系统
  报文
    由12个字节长的首部和4个长度可变的字段组成。
    0-15bit，标识；16-31bit，标志；32-47bit，问题数；48-63bit，资源记录数；64-79bit，授权资源记录数；80-95bit，额外资源记录数；查询问题字段；回答字段；授权字段；额外信息字段。
    标志字段，被划分为多个子字段：0-0bit，QR；1-4bit，opcode；5-5bit，AA；6-6bit，TC；7-7bit，RD；8-8bit，RA；9-11bit，zero；12-15bit，rcode。
  查询报文问题部分格式：0-31bit查询名；32-47bit，查询类型；48-63bit，查询类。
  回答字段、授权字段、附加信息字段，都采用相同的格式，被称为资源记录RR（Resource Record）。例如资源记录的格式为：0-31bit，域名；32-47bit，类型；48-63bit，类；64-95bit，生存时间；96-111bit，资源数据长度；资源数据。
【16】.IGMP
  Internet组管理协议
  IGMP报文
    封装在IP数据报中。IP数据报：IP首部，20bytes；IGMP报文，8bytes。
    报文格式：0-3bit，4bitIGMP版本（1）；4-7bit，4bitIGMP类型（1-2）；8-15bit，未用；16-31bit，检验和；32bit组地址（D类IP地址）。
    IGMP类型1，说明是从多播路由器发出的查询报文；类型2，说明是主机发出的报告报文。
  IGMP协议

【15】.UDP
  用户数据报协议
  面向数据报的运输层协议：进程的每个输出操作正好产生一个UDP数据报，并组装成一份待发送的IP数据报。
  报文包含了UDP协议的IP协议：IP首部（20bytes）+ UDP协议。
  UDP数据报：UDP首部，8bytes；UDP数据。
  UDP首部：16bit源端口号，16bit目的端口号，16bitUDP长度，16bit检验和。
  UDP数据报中伪首部长度为12bytes。格式：
    源IP地址，32bit；目的地址IP：32bit，值为0的8bit字段；协议字段(值为17)，8bit；UDP长度，16bit；源端口号，16bit；目的端口号，16bit；UDP长度，16bit；UDP检验和，16bit。
  ICMP不可达差错报文格式
    此种形式的格式，仅用于需要分片但又设置不分片标志比特时。
    类型(3)，0-7bit；代码(4)，8-15bit；检验和，16-31bit；未用(必须为0)，32-47bit；下一站网络的MTU，48-63bit。接着可以存放IP首部(包括选项)+原始IP数据报种数据的前8字节。
  UDP服务器输入队列
    通常UDP服务器所使用的每个UDP端口都与一个有限大小的输入队列相联系。这意味着，来自客户端的请求可能请求，可能会被UDP自动排队。排队时，可能存在溢出的情况，造成内核中的UDP模块丢弃数据报。

【14】.动态选路协议
  RIP(Routing Information Protocol)，选路信息协议。
  封装在UDP数据报中的RIP报文
    IP数据报：IP首部，20byte；UDP数据报（UDP首部，8byte；RIP报文）。
  使用了IP地址的RIP报文格式
    命令字段，1byte：1表示请求，2表示应答，3、4舍弃不用，5表示轮询，6表示轮询表项。请求表示要求其他系统发送其全部或部分路由表。应答则包含发送者全部或部分路由表。
    版本，1byte：通常为1，第二版RIP为2。
    紧接在后面的20字节指定地址系列（对于IP地址来说，其值是2）、IP地址以及相应的度量。RIP的度量是以跳计数的。
  OSPF
    开放最短路径优先。
    OSPF直接使用IP。
    OSPF优于RIP的特性
      1.OSPF可以对每个IP服务类型计算各自的路由集。
      2.给每个接口指派一个无维数的费用。
      3.当对同一个目的地址存在着多个相同费用的路由时，OSPF在这些路由上平均分配流量。我们称之为流量平衡。
      4.OSPF支持子网：子网掩码与每个通告路由相连。
      5.路由器之间的点对点链路不需要每端都有一个IP地址，我们称之为无编号网络。
      6.采用了一种简单鉴别机制。
      7.OSPF采用多播，而不是广播形式，以减少不参与OSPF的系统负荷。
  BGP
    边界边界网关协议。
  CIDR
    无类型域间选路。


【13】.IP选路
  IP搜索路由表的几个步骤：
    1.搜索匹配的主机地址
    2.搜索匹配的网络地址
    3.搜索默认表项。默认表项一般在路由器中被指定为一个网络表项，其网络号为0。
  当IP数据报应该被发送到另一个路由器时，收到数据报的路由器就要发送ICMP重定向差错报文给IP数据报的发送端。
  重定向一般用来让具有很少选路信息的主机逐渐建立更完善的路由表。ICMP重定向允许TCP/IP主机在进行选路时不需要具备智能特性，而把所有的智能特性放在路由器端。
  ICMP重定向报文的格式
    类型(5)，1byte；代码(0-3)，1byte；检验和，2byte；应该使用的路由器IP地址，byte；IP首部（包括选项）+原始IP数据报中的数据前8字节。
    类型：0，网络重定向；1，主机重定向；2，服务类型和网络重定向；3，服务类型和主机重定向。
  ICMP路由器请求报文格式
    类型(10)，1byte；代码(0)，1byte；校验和（2byte）；未用(置为0发送)；
  ICMP路由器通告报文格式：
    类型(9)，1byte；代码(0)，1byte；校验和，2byte；地址数，1byte；地址项长度(2)，1byte；生存时间，2byte；
    路由器地址[1]，4byte；优先级[1]，4byte；路由器地址[2]，4byte；优先级[2]，4byte...
【12】.Traceroute
  IP源站路由选项
    源站路由(source routing)的思想是由发送者指定路由。它可以采用以下两种形式：
      严格的源路由选择。code值为0x89。发送端指明IP数据报所必须采用的确切路由。如果一个路由器发现，源路由所指定的下一个路由器，不在其直接连接的网络上，那么它就返回一个“源路由失败”的ICMP差错报文。
      宽松的源路由选择。code值为0x83。发送端指明了一个数据报经过的IP地址清单，但是数据报在清单上指明的任意两个地址之间可以通过其他路由器。
    IP首部源站路由选项的通用格式：
      code(1),len(1),ptr(1),IP addr #1(4),IP addr #2(4), ... ,IP addr #9(4)
    DNS
      前向映射：给出域名返回IP；反向映射：给出IP返回域名。
【11】.Ping
  使用ICMP协议，使用ICMP回显请求和回显应答报文。
  TTL
    time to live，生存时间字段，设置了数据报可以经过的最多路由器数。它指定了数据报的生存时间。TTL的初始值由源主机设置（通常为32或64），一旦经过一个处理它的路由器，它的值就减去1.当该字段的值为0时，数据包就被丢弃，并发送ICMP报文通知源主机。
  IP时间戳选项
    40个字节：code(1byte),len(1byte),ptr(1byte),OF,FL,时间戳(#1)(4byte),时间戳(#2)(4byte), ... ,时间戳(#9)(4byte)。
    时间戳选项的code为0x44。其他两个字段len和ptr与记录路由选项相同：选项的总长度（一般为36或40）和指向下一个可用空间的指针（5，9，13等）。
    接下来的两个字段是4bit的值：OF表示溢出字段，FL表示标志字段。时间戳选项的操作根据标志字段来进行：标志0，只记录时间戳；标志1，每台路由器都记录它的IP地址和时间戳，在选项列表中只有4对地址和时间戳的空间；标志3，发送端对选项列表进行初始化，存放了4个IP地址和4个取值为0的时间戳值。只有当列表中的下一个IP地址与当前路由器地址相匹配时，才记录它的时间戳。
    如果路由器由于没有空间而不能增加时间戳选项，那么它将增加溢出字段的值。

【10】.ICMP：Internet控制报文协议
  ICMP报文中的TTL是最大值255.

【9】.RARP逆地址解析协议
  请求或应答的帧类型代码为0x8035，操作代码为3，应答操作代码为4。
  RARP请求以广播方式传送，应答以单播传送。

【8】.ARP地址解析协议
  ARP的功能是提供逻辑Internet地址与物理硬件地址的动态映射。

【7】.子网掩码
  根据本机的IP地址，可以知道它是否为A、B、C类网络。根据子网掩码可以知道子网号与主机号之间的分界线。

【6】.子网寻址
  子网编程：把IP地址的主机号分成一个子网号和一个主机号。

【5】.IP网际协议
  IP首部
    普通的IP首部长度为20个字节，含有选项字段时会改变这个长度。
  IP路由选择机制的特性：为一个网络指定一个路由器，而不必为每个主机指定一个路由器。

【4】.MTU
  链路层中数据帧的长度都有限制，这个特性叫做MTU，最大传输单元。
  点对点：296Byte。
  X.25：576Byte。
  IEEE 802.3`802.2：1492Byte。
  以太网：1500Byte。
  FDDI：4352Byte。
  两台通信主机网络路径中的最小的MTU，被称作路径MTU。
  Que：
    平均等待时间，为什么是传输最大数据帧所需时间的一半？
【3】.SLIP
  串行线路IP
  帧格式
    IP数据报以一个称作END（0xc0）的特殊字符结束。
    如果IP报文中某个字符为END，那么就要连续传输两个字节0xdb和0xdc来取代它。0xdb这个特殊字符被称作SLIP的ESC字符，但是它的值与ASCII码的ESC字符（0x1b）不同。
    如果IP报文中某个字符为SLIP的ESC字符，那么就要连续传输两个字节0xdb和0xdd来取代它。

【2】.PPP
  点对点协议。
  数据帧
    标识：7E，开始标识。
    地址：FF。
    控制：03。
    协议：2个字节。0x0021，表示信息字段是一个IP数据报；0xC021，表示信息字段是一个IP数据报；0x8021，表示信息字段是一个网络控制数据。
    信息：最多1500个字节。
    CRC：2个字节。这是一个循环冗余校验码，以检测数据帧中的错误。
    标识：7E，结束标识。

【1】.网络分层
  链路层、网络层、运输层、应用层 
  链路层协议：ARP、硬件接口、RARP
  网络层协议：ICMP、IP、IGMP
  运输层协议：TCP、UDP

6TCP、17UDP、1ICMP、2IGMP  
Quote of the Day Protocol
    port: 17.
A类网络
  首部：1个bit，值为0；网络号：7个bit；主机号：24个bit。
B类网络
  首部：2个bit，值为2；网络号：14个bit；主机号：16个bit。
C类网络
  首部：3个bit，值为6；网络号：21个bit；主机号：8个bit。
D类网络
  首部：4个bit，值为14；多播组号：后续28个bit。
E类网络
  首部：5个bit，值为30；后续28个bit留待后用。

http
  http1.0，http1.1，http2.0
  http1.0
    发送请求时，与服务器建立TCP连接，请求响应后，关闭该连接。
    缺点：连接无法复用；head of line blocking，浏览器会针对单个域名的服务器所能建立的连接数做限制，一般为6-8个。
  http1.1
