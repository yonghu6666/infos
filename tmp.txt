(function(window) {
    function EasyJSBridge() {}
    var log = function(text) {
        console.log('EasyJSBridge: ' + text);
    };

    var injectObj = function() {
        var _this = this;

        if (arguments.length < 2) {
            return;
        }

        var isAndroid = navigator.userAgent.indexOf('Android') > -1 || navigator.userAgent.indexOf('Adr') > -1;
        var isiOS = !!navigator.userAgent.match(/\\(i[^;]+;( U;)? CPU.+Mac OS X/);

        var androidObjName = '';
        var iOSObjName = '';

        var find = function(arr, e) {
            for (var i = 0; i < arr.length; i++) {
                if (arr[i] === e) {
                    return true;
                }
            }
            return false;
        };

        var getRealArags = function(args) {
            var android = [];
            var ios = [];
            var callBack = null;
            for (var i = 0; i < args.length; i++) {
                if (args[i] instanceof Array) {
                    ios = args[i];
                } else {
                    if (args[i] instanceof Function) {
                        callBack = args[i];
                    } else {
                        android.push(args[i]);
                    }
                }
            }
            var ret = {
                callBack: callBack,
                args: args,
            };

            if (ios.length == 0) {
                ret.args = android;
                return ret;
            }

            if (isAndroid) {
                ret.args = android;
            } else if (isiOS) {
                ret.args = ios;
            }
            return ret;
        };

        var callBack = function(m) {
            return function() {
                var args = Array.prototype.slice.apply(arguments);

                if (isAndroid) {
                    if (typeof window[androidObjName] != 'undefined') {
                        if (typeof window[androidObjName][m] != 'undefined') {
                            var arg = getRealArags(args);
                            if (arg.callBack != null) {
                                EasyJSBridge[m] = arg.callBack;
                            }

                            window[androidObjName][m].apply(window[androidObjName], arg.args);
                        } else {
                            log('android webview do not define method ' + m);
                        }
                    } else {
                        log('android webview do not define obj ' + androidObjName);
                    }

                    return;
                }
                if (isiOS) {
                    if (iOSObjName != '') {
                        if (typeof window.webkit != 'undefined' && typeof window.webkit.messageHandlers[iOSObjName] != 'undefined') {
                            var o1 = window.webkit.messageHandlers[iOSObjName];
                            var arg = getRealArags(args);
                            if (arg.callBack != null) {
                                EasyJSBridge[m] = arg.callBack;
                            }
                            o1.postMessage({
                                method: m,
                                parameter: arg.args
                            });
                        } else {
                            log('ios webview do not define object ' + iOSObjName);
                        }
                    } else {
                        if (typeof window.webkit != 'undefined' && typeof window.webkit.messageHandlers[m] != 'undefined') {
                            var o2 = window.webkit.messageHandlers[m];
                            var arg = getRealArags(args);
                            if (arg.callBack != null) {
                                EasyJSBridge[m] = arg.callBack;
                            }
                            o2.postMessage.apply(o2, arg.args);
                        } else {
                            log('ios webview do not define object ' + m);
                        }
                    }
                    return;
                }

                log('call in moblie webview');
            };
        };

        var addMethods = function(ms) {
            for (var i = 0; i < ms.length; i++) {
                _this[ms[i]] = callBack(ms[i]);
            }
            if (isAndroid && typeof window[androidObjName] != 'undefined') {
                var find = function(arr, e) {
                    for (var i = 0; i < arr.length; i++) {
                        if (arr[i] === e) {
                            return true;
                        }
                    }
                    return false;
                };

                for (var j in window[androidObjName]) {
                    if (!find(ms, j)) {
                        _this[j] = callBack(j);
                    }
                }
            }
        };
        if (arguments.length === 2) {
            androidObjName = arguments[0];
            if (arguments[1] instanceof Array) {
                addMethods(arguments[1]);
                return;
            }
        } else if (arguments.length === 3) {
            androidObjName = arguments[0];
            iOSObjName = arguments[1];
            if (arguments[2] instanceof Array) {
                addMethods(arguments[2]);
                return;
            }
        }

        log('parameters error!');
    };
    EasyJSBridge.create = function() {
        var easy = new EasyJSBridge();
        injectObj.apply(easy, arguments);
        return easy;
    };
    window.EasyJSBridge = EasyJSBridge;
})(window);

document.documentElement.style.setProperty('--theme-primary', '#EA312D');
document.documentElement.style.setProperty('--theme-primary-light', '#EE1919');
document.documentElement.style.setProperty('--theme-primary-dark', '#EE1919');
document.documentElement.style.setProperty('--client-height', document.body.clientHeight + "px"); 
! (function(e, t) {
    function n() {
        var n = l.getBoundingClientRect().width; (t = t || 540),
        n > t && (n = t);
        var i = (100 * n) / e;
        r.innerHTML = 'html{font-size:' + i + 'px;}';
    }
    var i, d = document,
    o = window,
    l = d.documentElement,
    r = document.createElement('style');
    if (l.firstElementChild) l.firstElementChild.appendChild(r);
    else {
        var a = d.createElement('div');
        a.appendChild(r),
        d.write(a.innerHTML),
        (a = null);
    }
    n(),
    o.addEventListener('resize',
    function() {
        clearTimeout(i),
        (i = setTimeout(n, 300));
    },
    !1, ),
    o.addEventListener('pageshow',
    function(e) {
        e.persisted && (clearTimeout(i), (i = setTimeout(n, 300)));
    },
    !1, ),
    'complete' === d.readyState ? (d.body.style.fontSize = '16px') : d.addEventListener('DOMContentLoaded',
    function(e) {
        d.body.style.fontSize = '16px';
    },
    !1, );
})(375, 750);


git push origin wb-dev:dev

// 需要熟悉的组件
Descriptions、Typography
FormTable FormList
UpdataRangeComp
ValidityItem
BasicComponent/Collection
SetupFeeItem
ProductBookSettingWrapper

ServiceRequirements，可增减列表
InputSearchSelect

git checkout -b dev origin/dev

git checkout test
git merge dev
git status
git pull
git push
git checkout dev


    {
      path: '/test',
      name: 'test',
      component: './Test',
    },
    {
      path: '/test/1',
      name: 'test1',
      component: './Test/Test1',
    },
    {
      path: '/test/2',
      name: 'test2',
      component: './Test/Test2',
    }

import { useDispatch, useHistory as umiHistory, useSelector } from 'umi';
AccountDetail

TabsLayout